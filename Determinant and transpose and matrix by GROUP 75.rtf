{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red70\green137\blue204;
\red194\green126\blue101;\red202\green202\blue202;\red212\green214\blue154;\red140\green211\blue254;\red167\green197\blue152;
\red89\green138\blue67;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c33725\c61176\c83922;
\cssrgb\c80784\c56863\c47059;\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;
\cssrgb\c41569\c60000\c33333;\cssrgb\c84314\c72941\c49020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <stdio.h>\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf7 \strokec7 print\cf6 \strokec6 (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ], \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 k\cf6 \strokec6 ) \cf10 \strokec10 //func to print array\cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \{\cb1 \
\cb3     \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 i\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 j\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6 ++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "\cf8 \strokec8 %d\cf5 \strokec5  "\cf6 \strokec6 , \cf8 \strokec8 arr\cf6 \strokec6 [\cf8 \strokec8 i\cf6 \strokec6 ][\cf8 \strokec8 j\cf6 \strokec6 ]);\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "\cf11 \strokec11 \\n\cf5 \strokec5 "\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf7 \strokec7 transpose\cf6 \strokec6 (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ], \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 k\cf6 \strokec6 ) \cf10 \strokec10 //func to print transpose\cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \{\cb1 \
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 brr\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ];\cb1 \
\cb3     \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 i\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 j\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6 ++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf8 \strokec8 brr\cf6 \strokec6 [\cf8 \strokec8 i\cf6 \strokec6 ][\cf8 \strokec8 j\cf6 \strokec6 ] = \cf8 \strokec8 arr\cf6 \strokec6 [\cf8 \strokec8 j\cf6 \strokec6 ][\cf8 \strokec8 i\cf6 \strokec6 ];\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf7 \strokec7 print\cf6 \strokec6 (\cf8 \strokec8 brr\cf6 \strokec6 , \cf8 \strokec8 k\cf6 \strokec6 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 int\cf6 \strokec6  \cf7 \strokec7 determinant\cf6 \strokec6 (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ], \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 k\cf6 \strokec6 ) \cf10 \strokec10 //func for calculating det\cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \{\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 k\cf6 \strokec6  == \cf9 \strokec9 1\cf6 \strokec6 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  (\cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 0\cf6 \strokec6 ][\cf9 \strokec9 0\cf6 \strokec6 ]);\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 else\cf6 \cb1 \strokec6 \
\cb3     \{\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 det\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 sub\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ];\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 sign\cf6 \strokec6  = \cf9 \strokec9 1\cf6 \strokec6 ;               \cf10 \strokec10 //sub is submatrix\cf6 \cb1 \strokec6 \
\cb3         \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 c\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 c\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 c\cf6 \strokec6 ++) \cf10 \strokec10 //c refers to column which we will iterate through arr where row is 0th.\cf6 \cb1 \strokec6 \
\cb3         \{\cb1 \
\cb3             \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 m\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 , \cf8 \strokec8 n\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ;           \cf10 \strokec10 // declared m and n to go through submatrix\cf6 \cb1 \strokec6 \
\cb3             \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 i\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6 ++) \cf10 \strokec10 //making submatrix now\cf6 \cb1 \strokec6 \
\cb3             \{\cb1 \
\cb3                 \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 j\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6 ++)\cb1 \
\cb3                 \{\cb1 \
\cb3                     \cf8 \strokec8 sub\cf6 \strokec6 [\cf8 \strokec8 i\cf6 \strokec6 ][\cf8 \strokec8 j\cf6 \strokec6 ] = \cf9 \strokec9 0\cf6 \strokec6 ;\cb1 \
\cb3                     \cf2 \strokec2 if\cf6 \strokec6  ((\cf8 \strokec8 i\cf6 \strokec6  != \cf9 \strokec9 0\cf6 \strokec6 ) && (\cf8 \strokec8 j\cf6 \strokec6  != \cf8 \strokec8 c\cf6 \strokec6 ))\cb1 \
\cb3                     \{\cb1 \
\cb3                         \cf8 \strokec8 sub\cf6 \strokec6 [\cf8 \strokec8 m\cf6 \strokec6 ][\cf8 \strokec8 n\cf6 \strokec6 ] = \cf8 \strokec8 arr\cf6 \strokec6 [\cf8 \strokec8 i\cf6 \strokec6 ][\cf8 \strokec8 j\cf6 \strokec6 ]; \cf10 \strokec10 //Now we need to add a ending condition for m and n.\cf6 \cb1 \strokec6 \
\cb3                         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 n\cf6 \strokec6  < (\cf8 \strokec8 k\cf6 \strokec6  - \cf9 \strokec9 2\cf6 \strokec6 ))       \cf10 \strokec10 //as k-2th column is last second column of sub and we have reached at the end column of arr.\cf6 \cb1 \strokec6 \
\cb3                         \{\cb1 \
\cb3                             \cf8 \strokec8 n\cf6 \strokec6 ++;\cb1 \
\cb3                         \}\cb1 \
\cb3                         \cf2 \strokec2 else\cf6 \cb1 \strokec6 \
\cb3                         \{\cb1 \
\cb3                             \cf8 \strokec8 n\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf10 \strokec10 // as soon as n becomes k-2 we jump of to next row setting column=0 in sub\cf6 \cb1 \strokec6 \
\cb3                             \cf8 \strokec8 m\cf6 \strokec6 ++;\cb1 \
\cb3                         \}\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\cb3             \cf8 \strokec8 det\cf6 \strokec6  = \cf8 \strokec8 det\cf6 \strokec6  + \cf8 \strokec8 sign\cf6 \strokec6  * (\cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 0\cf6 \strokec6 ][\cf8 \strokec8 c\cf6 \strokec6 ] * \cf7 \strokec7 determinant\cf6 \strokec6 (\cf8 \strokec8 sub\cf6 \strokec6 , \cf8 \strokec8 k\cf6 \strokec6  - \cf9 \strokec9 1\cf6 \strokec6 )); \cf10 \strokec10 //we can see recursion here.As matrix of order >3 will need it\cf6 \cb1 \strokec6 \
\cb3             \cf8 \strokec8 sign\cf6 \strokec6  = -\cf9 \strokec9 1\cf6 \strokec6  * \cf8 \strokec8 sign\cf6 \strokec6 ;                                         \cf10 \strokec10 //for alternating sign\cf6 \cb1 \strokec6 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 det\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 int\cf6 \strokec6  \cf7 \strokec7 main\cf6 \strokec6 ()\cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \{\cb1 \
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 arr\cf6 \strokec6 [\cf9 \strokec9 100\cf6 \strokec6 ][\cf9 \strokec9 100\cf6 \strokec6 ];\cb1 \
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 k\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "Enter order of determinant\cf11 \strokec11 \\n\cf5 \strokec5 "\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 scanf\cf6 \strokec6 (\cf5 \strokec5 "\cf8 \strokec8 %d\cf5 \strokec5 "\cf6 \strokec6 , &\cf8 \strokec8 k\cf6 \strokec6 );\cb1 \
\
\cb3     \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 i\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6 ++)\cb1 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 j\cf6 \strokec6  = \cf9 \strokec9 0\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6  < \cf8 \strokec8 k\cf6 \strokec6 ; \cf8 \strokec8 j\cf6 \strokec6 ++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf7 \strokec7 scanf\cf6 \strokec6 (\cf5 \strokec5 "\cf8 \strokec8 %d\cf5 \strokec5 "\cf6 \strokec6 , &\cf8 \strokec8 arr\cf6 \strokec6 [\cf8 \strokec8 i\cf6 \strokec6 ][\cf8 \strokec8 j\cf6 \strokec6 ]);\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "Array you entered is:\cf11 \strokec11 \\n\cf5 \strokec5 "\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 print\cf6 \strokec6 (\cf8 \strokec8 arr\cf6 \strokec6 , \cf8 \strokec8 k\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "Transpose of the matrix you entered is:\cf11 \strokec11 \\n\cf5 \strokec5 "\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 transpose\cf6 \strokec6 (\cf8 \strokec8 arr\cf6 \strokec6 , \cf8 \strokec8 k\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "Determinant of given matrix is: \cf11 \strokec11 \\n\cf5 \strokec5 "\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 printf\cf6 \strokec6 (\cf5 \strokec5 "\cf8 \strokec8 %d\cf5 \strokec5 "\cf6 \strokec6 , \cf7 \strokec7 determinant\cf6 \strokec6 (\cf8 \strokec8 arr\cf6 \strokec6 , \cf8 \strokec8 k\cf6 \strokec6 ));\cb1 \
\cb3     \cf2 \strokec2 return\cf6 \strokec6  \cf9 \strokec9 0\cf6 \strokec6 ;\cb1 \
\cb3 \}\cb1 \
}